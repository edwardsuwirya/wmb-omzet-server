// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OmzetClient is the client API for Omzet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OmzetClient interface {
	SubmitOmzet(ctx context.Context, in *OmzetRequestMessage, opts ...grpc.CallOption) (*OmzetResultMessage, error)
	ClearOmzet(ctx context.Context, in *OmzetRequestMessage, opts ...grpc.CallOption) (*OmzetResultMessage, error)
}

type omzetClient struct {
	cc grpc.ClientConnInterface
}

func NewOmzetClient(cc grpc.ClientConnInterface) OmzetClient {
	return &omzetClient{cc}
}

func (c *omzetClient) SubmitOmzet(ctx context.Context, in *OmzetRequestMessage, opts ...grpc.CallOption) (*OmzetResultMessage, error) {
	out := new(OmzetResultMessage)
	err := c.cc.Invoke(ctx, "/api.Omzet/SubmitOmzet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omzetClient) ClearOmzet(ctx context.Context, in *OmzetRequestMessage, opts ...grpc.CallOption) (*OmzetResultMessage, error) {
	out := new(OmzetResultMessage)
	err := c.cc.Invoke(ctx, "/api.Omzet/ClearOmzet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OmzetServer is the server API for Omzet service.
// All implementations must embed UnimplementedOmzetServer
// for forward compatibility
type OmzetServer interface {
	SubmitOmzet(context.Context, *OmzetRequestMessage) (*OmzetResultMessage, error)
	ClearOmzet(context.Context, *OmzetRequestMessage) (*OmzetResultMessage, error)
	mustEmbedUnimplementedOmzetServer()
}

// UnimplementedOmzetServer must be embedded to have forward compatible implementations.
type UnimplementedOmzetServer struct {
}

func (UnimplementedOmzetServer) SubmitOmzet(context.Context, *OmzetRequestMessage) (*OmzetResultMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitOmzet not implemented")
}
func (UnimplementedOmzetServer) ClearOmzet(context.Context, *OmzetRequestMessage) (*OmzetResultMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearOmzet not implemented")
}
func (UnimplementedOmzetServer) mustEmbedUnimplementedOmzetServer() {}

// UnsafeOmzetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OmzetServer will
// result in compilation errors.
type UnsafeOmzetServer interface {
	mustEmbedUnimplementedOmzetServer()
}

func RegisterOmzetServer(s grpc.ServiceRegistrar, srv OmzetServer) {
	s.RegisterService(&Omzet_ServiceDesc, srv)
}

func _Omzet_SubmitOmzet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OmzetRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmzetServer).SubmitOmzet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Omzet/SubmitOmzet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmzetServer).SubmitOmzet(ctx, req.(*OmzetRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Omzet_ClearOmzet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OmzetRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmzetServer).ClearOmzet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Omzet/ClearOmzet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmzetServer).ClearOmzet(ctx, req.(*OmzetRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Omzet_ServiceDesc is the grpc.ServiceDesc for Omzet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Omzet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Omzet",
	HandlerType: (*OmzetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitOmzet",
			Handler:    _Omzet_SubmitOmzet_Handler,
		},
		{
			MethodName: "ClearOmzet",
			Handler:    _Omzet_ClearOmzet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/omzet.proto",
}
